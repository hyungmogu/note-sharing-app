{"version":3,"sources":["components/PrimaryHeader.js","components/PrimaryHeaderMobile.js","components/PrivateRoute.js","components/ImageFileObject.js","screens/HomeScreen.js","screens/LoginScreen.js","screens/SignUpScreen.js","App.js","serviceWorker.js","index.js"],"names":["PrimaryHeader","location","this","props","pathname","match","className","icon","faPlus","to","Component","withRouter","PrimaryHeaderMobile","faBars","PrivateRoute","component","render","ImageFileObject","src","HomeScreen","LoginScreen","handleSubmit","history","push","onSubmit","type","placeholder","SignUpScreen","exact","App","basename","path","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAOMA,E,iLAEQ,IACCC,EAAYC,KAAKC,MAAjBF,SAEP,OAAIA,EAASG,SAASC,MAAM,YACxBJ,EAASG,SAASC,MAAM,YAEjB,KAIX,4BAAQC,UAAU,8BACd,yBAAKA,UAAU,qBACX,iCACI,4BAAQA,UAAU,2BACd,kBAAC,IAAD,CAAiBC,KAAMC,QAG/B,iCACI,4BACI,4BAAI,kBAAC,IAAD,CAASC,GAAG,KAAZ,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,mBACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,oB,GAxBAC,aAiCbC,cAAWX,GCjCpBY,E,iLAEQ,IACCX,EAAYC,KAAKC,MAAjBF,SAEP,OAAIA,EAASG,SAASC,MAAM,YACxBJ,EAASG,SAASC,MAAM,YAEjB,KAIX,4BAAQC,UAAU,6BACd,4BAAQA,UAAU,4BACd,kBAAC,IAAD,CAAiBC,KAAMM,OAE3B,iCACI,kE,GAjBkBH,aAwBnBC,cAAWC,G,QCRXE,G,MAnBM,SAAC,GAAwC,IAA3BJ,EAA0B,EAArCK,UAAyBZ,EAAY,6BAK3D,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEa,OAAQ,SAAAb,GAAK,OAET,kBAACO,EAAcP,SCEVc,E,iLAXP,OACI,yBAAKX,UAAU,uBACX,yBAAKY,IAAI,oCACT,iCACI,8C,GAPUR,aCoBfS,E,iLAfP,OACI,6BACAb,UAAU,wCAEN,0BAAMA,UAAU,sBACZ,iCACI,oDACA,kBAAC,EAAD,a,GAVCI,aC4BVU,E,2MAxBXC,aAAe,WACX,EAAKlB,MAAMmB,QAAQC,KAAK,U,wEAIxB,OACI,6BACAjB,UAAU,+CAEN,0BACIA,UAAU,yBACVkB,SAAUtB,KAAKmB,cAEf,wDACA,2BAAOI,KAAK,QAAQC,YAAY,UAChC,2BAAOD,KAAK,WAAWC,YAAY,aACnC,4BAAQpB,UAAU,8BAA8BmB,KAAK,UAArD,SACA,kBAAC,IAAD,CAAShB,GAAG,UAAUH,UAAU,iCAAhC,iB,GAlBMI,aCoBXiB,E,iLAlBP,OACI,6BACArB,UAAU,+CAEN,0BAAMA,UAAU,0BACZ,wDACA,2BAAOmB,KAAK,OAAOC,YAAY,SAC/B,2BAAOD,KAAK,QAAQC,YAAY,UAChC,2BAAOD,KAAK,WAAWC,YAAY,aACnC,2BAAOD,KAAK,WAAWC,YAAY,qBACnC,4BAAQpB,UAAU,8BAA8BmB,KAAK,UAArD,SACA,kBAAC,IAAD,CAASG,OAAK,EAACnB,GAAG,SAASH,UAAU,iCAArC,c,GAbOI,a,MC0BZmB,MAhBf,WACI,OACI,kBAAC,IAAD,CAAeC,SAAU,oBACrB,yBAAKxB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOsB,OAAK,EAACG,KAAK,SAAShB,UAAWK,IACtC,kBAAC,IAAD,CAAOQ,OAAK,EAACG,KAAK,UAAUhB,UAAWY,IACvC,kBAAC,EAAD,CAAcC,OAAK,EAACG,KAAK,QAAQhB,UAAWI,QCd5Ca,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAAS7B,MACvB,2DCZN8B,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.04573175.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\n\nclass PrimaryHeader extends Component {\n\n    render() {\n        const {location} = this.props;\n\n        if (location.pathname.match(/\\/login/) ||\n            location.pathname.match(/\\/signup/)\n        ) {\n            return null;\n        }\n\n        return (\n        <header className=\"header--navigation-primary\">\n            <nav className=\"nav--type-desktop\">\n                <section>\n                    <button className=\"button button--type-add\">\n                        <FontAwesomeIcon icon={faPlus}/>\n                    </button>\n                </section>\n                <section>\n                    <ul>\n                        <li><NavLink to=\"#\">Physics</NavLink></li>\n                        <li><NavLink to=\"#\">Social Studies</NavLink></li>\n                        <li><NavLink to=\"#\">Biology</NavLink></li>\n                        <li><NavLink to=\"#\">English</NavLink></li>\n                    </ul>\n                </section>\n            </nav>\n        </header>\n        );\n    }\n};\n\nexport default withRouter(PrimaryHeader);","import React, { Component } from 'react';\n\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\n\nclass PrimaryHeaderMobile extends Component {\n\n    render() {\n        const {location} = this.props;\n\n        if (location.pathname.match(/\\/login/) ||\n            location.pathname.match(/\\/signup/)\n        ) {\n            return null;\n        }\n\n        return (\n        <header className=\"header--navigation-mobile\">\n            <button className=\"button button--type-menu\">\n                <FontAwesomeIcon icon={faBars}/>\n            </button>\n            <section>\n                <strong>Note Sharing Application</strong>\n            </section>\n        </header>\n        );\n    }\n};\n\nexport default withRouter(PrimaryHeaderMobile);","import React from 'react';\nimport AuthService from '../services/AuthService';\nimport { Redirect, Route } from 'react-router-dom';\n\nconst PrivateRoute = ({ component: Component, ...props }) => {\n\n//   const isLoggedIn = AuthService.isLoggedIn()\nconst isLoggedIn = true;\n\n  return (\n    <Route\n      {...props}\n      render={props =>\n        isLoggedIn ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n        )\n      }\n    />\n  )\n}\n\nexport default PrivateRoute","import React, { Component } from 'react';\n\nclass ImageFileObject extends Component {\n\n    render() {\n        return (\n            <div className=\"div--type-imageFile\">\n                <img src=\"https://via.placeholder.com/200\"/>\n                <section>\n                    <span>Page 1</span>\n                </section>\n            </div>\n        );\n    }\n};\n\nexport default ImageFileObject;","import React, { Component } from 'react';\n\nimport ImageFileObject from '../components/ImageFileObject';\n\nclass HomeScreen extends Component {\n\n    render() {\n        return (\n            <section\n            className=\"section--screen section--screen-home\"\n            >\n                <main className=\"main--type-content\">\n                    <section>\n                        <h3>Recently Added Notes</h3>\n                        <ImageFileObject/>\n                    </section>\n                </main>\n            </section>\n        );\n    }\n}\n\nexport default HomeScreen;\n","import React, { Component } from 'react';\n\nimport {\n    NavLink\n  } from 'react-router-dom';\n\n\nclass LoginScreen extends Component {\n    handleSubmit = () => {\n        this.props.history.push('/home');\n    }\n\n    render() {\n        return (\n            <section\n            className=\"section--screen section--screen-loginSignup\"\n            >\n                <form\n                    className=\"form--type-loginSignup\"\n                    onSubmit={this.handleSubmit}\n                >\n                    <h3>Note Sharing Application</h3>\n                    <input type=\"email\" placeholder=\"Email\"/>\n                    <input type=\"password\" placeholder=\"Password\"/>\n                    <button className=\"button button--type-primary\" type=\"submit\">Login</button>\n                    <NavLink to=\"/signup\" className=\"button button--type-secondary\">Sign up</NavLink>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default LoginScreen;\n","import React, { Component } from 'react';\n\nimport {\n    NavLink\n  } from 'react-router-dom';\n\n\nclass SignUpScreen extends Component {\n    render() {\n        return (\n            <section\n            className=\"section--screen section--screen-loginSignup\"\n            >\n                <form className=\"form--type-loginSignup\">\n                    <h3>Note Sharing Application</h3>\n                    <input type=\"text\" placeholder=\"Name\"/>\n                    <input type=\"email\" placeholder=\"Email\"/>\n                    <input type=\"password\" placeholder=\"Password\"/>\n                    <input type=\"password\" placeholder=\"Password Confirm\"/>\n                    <button className=\"button button--type-primary\" type=\"submit\">Login</button>\n                    <NavLink exact to=\"/login\" className=\"button button--type-secondary\">Back</NavLink>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default SignUpScreen;\n","import React from 'react';\n\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nimport PrimaryHeader from './components/PrimaryHeader';\nimport PrimaryHeaderMobile from './components/PrimaryHeaderMobile';\nimport PrivateRoute from './components/PrivateRoute';\n\nimport HomeScreen from './screens/HomeScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport SignUpScreen from './screens/SignUpScreen';\nimport './App.scss';\n\nfunction App() {\n    return (\n        <BrowserRouter basename={\"note-sharing-app\"}>\n            <div className=\"App\">\n                <PrimaryHeaderMobile/>\n                <PrimaryHeader/>\n                <Switch>\n                    <Route exact path=\"/login\" component={LoginScreen}/>\n                    <Route exact path=\"/signup\" component={SignUpScreen}/>\n                    <PrivateRoute exact path=\"/home\" component={HomeScreen}/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}