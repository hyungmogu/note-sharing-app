{"version":3,"sources":["components/Header.js","screens/HomeScreen.js","screens/LoginScreen.js","screens/SignUpScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","class","to","HomeScreen","Component","LoginScreen","handleSubmit","props","history","push","onSubmit","this","type","placeholder","SignUpScreen","exact","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAuBeA,EAhBA,kBACX,4BAAQC,UAAU,8BACd,yBAAKA,UAAU,qBACX,iCACI,4BAAQC,MAAM,oBAAd,MAEJ,wBAAID,UAAU,YACV,4BAAI,kBAAC,IAAD,CAASE,GAAG,KAAZ,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,mBACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,KAAZ,gB,sCCALC,E,iLAZP,OACI,6BACAH,UAAU,wBAEN,oC,GAPSI,aC8BVC,E,2MAxBXC,aAAe,WACX,EAAKC,MAAMC,QAAQC,KAAK,U,wEAIxB,OACI,6BACAT,UAAU,+BAEN,0BACIA,UAAU,yBACVU,SAAUC,KAAKL,cAEf,wDACA,2BAAOM,KAAK,QAAQC,YAAY,UAChC,2BAAOD,KAAK,WAAWC,YAAY,aACnC,4BAAQb,UAAU,8BAA8BY,KAAK,UAArD,SACA,kBAAC,IAAD,CAASV,GAAG,UAAUF,UAAU,iCAAhC,iB,GAlBMI,aCoBXU,E,iLAlBP,OACI,6BACAd,UAAU,+BAEN,0BAAMA,UAAU,0BAChB,wDACA,2BAAOY,KAAK,OAAOC,YAAY,SAC/B,2BAAOD,KAAK,QAAQC,YAAY,UAChC,2BAAOD,KAAK,WAAWC,YAAY,aACnC,2BAAOD,KAAK,WAAWC,YAAY,qBACnC,4BAAQb,UAAU,8BAA8BY,KAAK,UAArD,SACA,kBAAC,IAAD,CAASG,OAAK,EAACb,GAAG,IAAIF,UAAU,iCAAhC,c,GAbWI,a,MCsBZY,MAff,WACI,OACI,kBAAC,IAAD,CAAeC,SAAU,oBACrB,yBAAKjB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOe,OAAK,EAACG,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOU,OAAK,EAACG,KAAK,QAAQC,UAAWhB,IACrC,kBAAC,IAAD,CAAOY,OAAK,EAACG,KAAK,UAAUC,UAAWL,QCVvCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77f2b8fe.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n  NavLink\n} from 'react-router-dom';\n\n\nconst Header = () => (\n    <header className=\"header--navigation-primary\">\n        <nav className=\"nav--type-desktop\">\n            <section>\n                <button class=\"button--type-add\">+</button>\n            </section>\n            <ul className=\"main-nav\">\n                <li><NavLink to=\"#\">Physics</NavLink></li>\n                <li><NavLink to=\"#\">Social Studies</NavLink></li>\n                <li><NavLink to=\"#\">Biology</NavLink></li>\n                <li><NavLink to=\"#\">English</NavLink></li>\n            </ul>\n        </nav>\n    </header>\n);\n\nexport default Header;","import React, { Component } from 'react';\n\nclass HomeScreen extends Component {\n\n    render() {\n        return (\n            <section\n            className=\"section--screen-home\"\n            >\n                <main>\n\n                </main>\n            </section>\n        );\n    }\n}\n\nexport default HomeScreen;\n","import React, { Component } from 'react';\n\nimport {\n    NavLink\n  } from 'react-router-dom';\n\n\nclass LoginScreen extends Component {\n    handleSubmit = () => {\n        this.props.history.push('/home');\n    }\n\n    render() {\n        return (\n            <section\n            className=\"section--screen-loginSignup\"\n            >\n                <form\n                    className=\"form--type-loginSignup\"\n                    onSubmit={this.handleSubmit}\n                >\n                    <h3>Note Sharing Application</h3>\n                    <input type=\"email\" placeholder=\"Email\"/>\n                    <input type=\"password\" placeholder=\"Password\"/>\n                    <button className=\"button button--type-primary\" type=\"submit\">Login</button>\n                    <NavLink to=\"/signup\" className=\"button button--type-secondary\">Sign up</NavLink>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default LoginScreen;\n","import React, { Component } from 'react';\n\nimport {\n    NavLink\n  } from 'react-router-dom';\n\n\nclass SignUpScreen extends Component {\n    render() {\n        return (\n            <section\n            className=\"section--screen-loginSignup\"\n            >\n                <form className=\"form--type-loginSignup\">\n                <h3>Note Sharing Application</h3>\n                <input type=\"text\" placeholder=\"Name\"/>\n                <input type=\"email\" placeholder=\"Email\"/>\n                <input type=\"password\" placeholder=\"Password\"/>\n                <input type=\"password\" placeholder=\"Password Confirm\"/>\n                <button className=\"button button--type-primary\" type=\"submit\">Login</button>\n                <NavLink exact to=\"/\" className=\"button button--type-secondary\">Back</NavLink>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default SignUpScreen;\n","import React from 'react';\n\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nimport Header from './components/Header';\nimport HomeScreen from './screens/HomeScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport SignUpScreen from './screens/SignUpScreen';\nimport './App.scss';\n\nfunction App() {\n    return (\n        <BrowserRouter basename={\"note-sharing-app\"}>\n            <div className=\"App\">\n                <Header/>\n                <Switch>\n                    <Route exact path=\"/\" component={LoginScreen}/>\n                    <Route exact path=\"/home\" component={HomeScreen}/>\n                    <Route exact path=\"/signup\" component={SignUpScreen}/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}